; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; Your QtUPnP folder
#define MyDevelDir "C:\Users\patrice\Documents\Development\"

#define MyAppName "nixie"
#define MyAppVersion "0.0.1"
#define MyAppPublisher "Nixie a vintage virtual Nixie clock"
#define MyAppExeName "nixie.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0DCE1018-07FE-4507-BEDA-637958DA7ABA}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename={#MyAppName}-win32-0.0.1
Compression=lzma
SolidCompression=yes
UninstallDisplayIcon={app}\{#MyAppName}.exe

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "{#MyDevelDir}\vclock\nixie\install\win32\build\*.*"; DestDir: "{app}"; Flags: recursesubdirs ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[UninstallDelete]
Type: filesandordirs; Name: "{userappdata}\{#MyAppName}"

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent; AfterInstall: SetFirewallException;

[CustomMessages]
RBI=Nixie is running. Close it before install.
RBU=Nixie is running. Close it before uninstall.
french.RBI=Nixie est en cours d'exécution. Fermer avant d'installer. 
french.RBU=Nixie est en cours d'exécution. Fermer avant de désinstaller. 
              
[Code]
function InitializeSetup(): Boolean;
var
 handle:Longint;
 cm:String;
Begin
  Result := True;
  handle := FindWindowByWindowName ('nixie');
  if (handle <> 0) Then
  Begin
    cm := CustomMessage('RBI');
    MsgBox(cm, mbError, MB_OK);
    Result := False;
  End
End; 

function InitializeUninstall(): Boolean;
var
 handle:Longint;
 cm:String;
Begin
  Result := True;
  handle := FindWindowByWindowName ('nixie');
  if (handle <> 0) Then
  Begin
    cm := CustomMessage('RBU');
    MsgBox(cm, mbError, MB_OK);
    Result := False;
  End
End;
  
// Utility functions for Inno Setup
// Used to add/remove programs from the windows firewall rules
// Code originally from http://news.jrsoftware.org/news/innosetup/msg43799.html
const
  NET_FW_SCOPE_ALL = 0;
  NET_FW_IP_VERSION_ANY = 2;

procedure SetFirewallException;
var
  FirewallObject:Variant;
  FirewallManager:Variant;
  FirewallProfile:Variant;
  FileName:String;
  AppName:String;
begin
  try
    AppName:=ExpandConstant('{#MyAppName}');
    FileName:=ExpandConstant('{app}\{#MyAppExeName}');
    FirewallObject:=CreateOleObject('HNetCfg.FwAuthorizedApplication');
    FirewallObject.ProcessImageFileName:=FileName;
    FirewallObject.Name:=AppName;
    FirewallObject.Scope:=NET_FW_SCOPE_ALL;
    FirewallObject.IpVersion:=NET_FW_IP_VERSION_ANY;
    FirewallObject.Enabled:=True;
    FirewallManager:=CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile:=FirewallManager.LocalPolicy.CurrentProfile;
    FirewallProfile.AuthorizedApplications.Add(FirewallObject);
  except
  end;
end;

procedure RemoveFirewallException(FileName:string);
var
  FirewallManager:Variant;
  FirewallProfile:Variant;
begin
  try
    FirewallManager:=CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile:=FirewallManager.LocalPolicy.CurrentProfile;
    FireWallProfile.AuthorizedApplications.Remove(FileName);
  except
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep:TUninstallStep);
var
  Filename:String;
begin
  FileName:=ExpandConstant('{app}\{#MyAppExeName}');
  if CurUninstallStep=usPostUninstall then
     RemoveFirewallException(Filename);
end;
